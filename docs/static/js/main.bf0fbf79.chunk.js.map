{"version":3,"sources":["base/hooks/context.js","reportWebVitals.js","index.js","base/hooks/reducer.js"],"names":["AppContext","React","createContext","initialData","useContext","Provider","props","useReducer","reducers","store","dispatch","value","children","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","App","lazy","ReactDOM","render","fallback","path","component","document","getElementById","console","info","ActionType","SET_ERRORMSG","CLEAR","SET_USER","SET_IS_LOADING","user","errorMsg","isLoading","state","action","Object","freeze","data","type"],"mappings":"qMAGMA,EAAaC,IAAMC,cAAc,CAACC,IAAa,eAC9C,SAASC,IACZ,OAAOH,IAAMG,WAAWJ,GAWbK,IATf,SAAkBC,GACd,MAA0BL,IAAMM,WAAWC,IAAUL,KAArD,mBAAOM,EAAP,KAAcC,EAAd,KACA,OACI,cAACV,EAAWK,SAAZ,CAAqBM,MAAO,CAACF,EAAOC,GAApC,SACKJ,EAAMM,a,oFCCJC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,eCFRQ,EAAMrB,IAAMsB,MAAK,kBAAM,gCAE7BC,IAASC,OACP,cAAC,IAAD,UACE,cAAC,WAAD,CAAUC,SAAS,UAAnB,SACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOC,KAAK,IAAIC,UAAWN,YAKnCO,SAASC,eAAe,SAO1BjB,EAAgBkB,QAAQC,O,iJCxBXC,EAAa,CACtBC,aAAc,eACdC,MAAO,QACPC,SAAU,WACVC,eAAgB,kBAGPlC,EAAc,CACvBmC,KAAM,GACNC,SAAU,KACVC,WAAW,GAGFhC,EAAW,SAAUiC,EAAOC,GACrCC,OAAOC,OAAOH,GACd,IAAMI,EAAI,eAAQJ,GAClB,OAAQC,EAAOI,MACX,KAAKb,EAAWG,SAEZ,OADAS,EAAKP,KAAOI,EAAOG,KAAKP,KACjBO,EACX,KAAKZ,EAAWC,aAEZ,OADAW,EAAKN,SAAWG,EAAOG,KAAKN,SACrBM,EACX,KAAKZ,EAAWI,eAEZ,OADAQ,EAAKL,UAAYE,EAAOG,KAAKL,UACtBK,EACX,KAAKZ,EAAWE,MACZ,OAAOhC,EACX,QACI,OAAO0C,M","file":"static/js/main.bf0fbf79.chunk.js","sourcesContent":["import React from 'react'\nimport { initialData, reducers } from './reducer'\n\nconst AppContext = React.createContext([initialData, function () { }])\nexport function useContext() {\n    return React.useContext(AppContext)\n}\nfunction Provider(props) {\n    const [store, dispatch] = React.useReducer(reducers, initialData)\n    return (\n        <AppContext.Provider value={[store, dispatch]}>\n            {props.children}\n        </AppContext.Provider>\n    )\n}\n\nexport default Provider\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { Suspense } from 'react'\nimport ReactDOM from 'react-dom'\nimport { MemoryRouter as Router, Route, Switch } from 'react-router-dom'\nimport reportWebVitals from './reportWebVitals'\nimport Provider from './base/hooks/context'\nconst App = React.lazy(() => import('./base/App'))\n\nReactDOM.render(\n  <Provider>\n    <Suspense fallback=\"Loading\">\n      <Router >\n        <Switch>\n          <Route path=\"/\" component={App} />\n        </Switch>\n      </Router>\n    </Suspense>\n  </Provider>,\n  document.getElementById('root')\n)\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(console.info)\n","export const ActionType = {\n    SET_ERRORMSG: 'SET_ERRORMSG',\n    CLEAR: 'CLEAR',\n    SET_USER: 'SET_USER',\n    SET_IS_LOADING: 'SET_IS_LOADING'\n}\n\nexport const initialData = {\n    user: {},\n    errorMsg: null,\n    isLoading: false\n}\n\nexport const reducers = function (state, action) {\n    Object.freeze(state)\n    const data = { ...state }\n    switch (action.type) {\n        case ActionType.SET_USER:\n            data.user = action.data.user\n            return data\n        case ActionType.SET_ERRORMSG:\n            data.errorMsg = action.data.errorMsg\n            return data\n        case ActionType.SET_IS_LOADING:\n            data.isLoading = action.data.isLoading\n            return data\n        case ActionType.CLEAR:\n            return initialData\n        default:\n            return data\n    }\n}\n"],"sourceRoot":""}